package org.city4age;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;

import com.hp.hpl.jena.rdf.model.*;
import com.hp.hpl.jena.reasoner.Reasoner;
import com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;
import com.hp.hpl.jena.reasoner.rulesys.Rule;
import com.hp.hpl.jena.util.PrintUtil;
import com.hp.hpl.jena.util.iterator.ExtendedIterator;
import com.hp.hpl.jena.util.iterator.Filter;
import com.hp.hpl.jena.rdf.model.impl.StmtIteratorImpl;

/**
 * This class executes the main purpose of the Rule Engine Reasoner using Jena Libraries to infer new statements.
 * 
 * @author Rub√©n Mulero
 *
 */
public class City4ageRuleEngine {

	/**
	 * Primary execution. This method executes all logic needed for Infer new statemenets
	 * 
	 * @param args In this method we don't need to pass any main arguments.
	 * @return Nothing
	 */
	public static void main (String args[]){
		//Generating default model
		Model instances = ModelFactory.createDefaultModel();
		try {
			// Get actual user dir program execution
			File execution_path = new File(".").getCanonicalFile();
			File relative_dest = new File(execution_path, "../../ruleEngine");
			String absolute = relative_dest.getCanonicalPath();
			// Read datasets
			instances.read("file:"+ absolute +"/dataset.txt", "TURTLE");
			// Load rules using Rule and create instance of Rule Reasoner.
			Reasoner myReasoner = new GenericRuleReasoner(Rule.rulesFromURL("file:"+ absolute +"/rules.txt"));
			myReasoner.setDerivationLogging(true);
			// Infer new instances using rules and our instances
			InfModel inf = ModelFactory.createInfModel(myReasoner, instances);
			if (!inf.isEmpty()){
				// Write inference in a new file
				// inf.setNsPrefix("drc", "http://www.moreschemas.org/#");	### If We want to add adicional prefix
				PrintWriter destFile = new PrintWriter(absolute +"/mapping.ttl", "UTF-8");
				//inf.write(System.out, "RDF/XML"); Write in console
				inf.write(destFile, "TURTLE"); // Write using PW in UTF-8 to an archive
				// Print results in console
				// new City4ageRuleEngine().printResults(inf);
				// Print new infered elements (if any)
				new City4ageRuleEngine().printOnlyNews(inf, instances);
				// Close files
				destFile.close();
				inf.close();
				System.out.println("Rule engine executed OK");
			}else {
				System.out.println("Something happen, maybe we don't have any rules or datasets?");
			}
		} catch (IOException e1) {
			e1.printStackTrace();
		}finally {
			instances.close();
		}
	}


	/**
	 * This method prints all the elements from the ingered model.
	 *
 	 * @param pInf Infered model Object
     */
	private void printResults(InfModel pInf) {
		// Print Results in console
		// Generating an Iterator
		StmtIterator iter = pInf.listStatements();
		while (iter.hasNext()) {
			System.out.println(" - " + PrintUtil.print(iter.nextStatement()));
		}
		iter.close();
	}

	/**
	 * This method only prints new statemens generated by our rules in rules.txt
	 *
	 * @param pInf Infered model Object
	 * @param pInstances Instances Model Object.
     */
	private void printOnlyNews(InfModel pInf, Model pInstances) {
		ExtendedIterator<Statement> stmts = pInf.listStatements().filterDrop(new Filter<Statement>() {
			@Override
			public boolean accept(Statement o) {
				return pInstances.contains(o);
			}
		});
		Model deductions = ModelFactory.createDefaultModel().add( new StmtIteratorImpl(stmts));
		// Write results in console
		deductions.write(System.out, "TURTLE");
		stmts.close();
		deductions.close();
	}
}